// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: checks/checks.proto

package checksum

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChecksumClient is the client API for Checksum service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChecksumClient interface {
	ComputeChecksum(ctx context.Context, in *ComputeChecksumRequest, opts ...grpc.CallOption) (*ComputeChecksumResponse, error)
	ComputeAddition(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
}

type checksumClient struct {
	cc grpc.ClientConnInterface
}

func NewChecksumClient(cc grpc.ClientConnInterface) ChecksumClient {
	return &checksumClient{cc}
}

func (c *checksumClient) ComputeChecksum(ctx context.Context, in *ComputeChecksumRequest, opts ...grpc.CallOption) (*ComputeChecksumResponse, error) {
	out := new(ComputeChecksumResponse)
	err := c.cc.Invoke(ctx, "/Checksum/ComputeChecksum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checksumClient) ComputeAddition(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	out := new(ReadResponse)
	err := c.cc.Invoke(ctx, "/Checksum/ComputeAddition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChecksumServer is the server API for Checksum service.
// All implementations must embed UnimplementedChecksumServer
// for forward compatibility
type ChecksumServer interface {
	ComputeChecksum(context.Context, *ComputeChecksumRequest) (*ComputeChecksumResponse, error)
	ComputeAddition(context.Context, *ReadRequest) (*ReadResponse, error)
	mustEmbedUnimplementedChecksumServer()
}

// UnimplementedChecksumServer must be embedded to have forward compatible implementations.
type UnimplementedChecksumServer struct {
}

func (UnimplementedChecksumServer) ComputeChecksum(context.Context, *ComputeChecksumRequest) (*ComputeChecksumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComputeChecksum not implemented")
}
func (UnimplementedChecksumServer) ComputeAddition(context.Context, *ReadRequest) (*ReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComputeAddition not implemented")
}
func (UnimplementedChecksumServer) mustEmbedUnimplementedChecksumServer() {}

// UnsafeChecksumServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChecksumServer will
// result in compilation errors.
type UnsafeChecksumServer interface {
	mustEmbedUnimplementedChecksumServer()
}

func RegisterChecksumServer(s grpc.ServiceRegistrar, srv ChecksumServer) {
	s.RegisterService(&Checksum_ServiceDesc, srv)
}

func _Checksum_ComputeChecksum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeChecksumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChecksumServer).ComputeChecksum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Checksum/ComputeChecksum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChecksumServer).ComputeChecksum(ctx, req.(*ComputeChecksumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Checksum_ComputeAddition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChecksumServer).ComputeAddition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Checksum/ComputeAddition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChecksumServer).ComputeAddition(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Checksum_ServiceDesc is the grpc.ServiceDesc for Checksum service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Checksum_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Checksum",
	HandlerType: (*ChecksumServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ComputeChecksum",
			Handler:    _Checksum_ComputeChecksum_Handler,
		},
		{
			MethodName: "ComputeAddition",
			Handler:    _Checksum_ComputeAddition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "checks/checks.proto",
}
